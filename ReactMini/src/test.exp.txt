

******* Test 1 *******

BoxWrapper with one box
-------------------
Creating instance #1 of BoxWrapper with 1 subelements
Creating instance #2 of Box with 1 subelements
Tree #0 
{
  id:1
  "BoxWrapper.subtree": 
  {
    id:2
    "Box.subtree": ImABox
  }
}

BoxWrapper with two boxes
-------------------
Updating BoxWrapper
Creating instance #3 of Box with 1 subelements
Creating instance #4 of Box with 1 subelements
instance #1 updated to instance #1 changed: subtree
Tree #0 
{
  id:1
  "BoxWrapper.subtree": 
  {
    id:3
    "Box.subtree": ImABox
  },
  {
    id:4
    "Box.subtree": ImABox
  }
}

Trees rendered
-------------------
Tree #0 
{
  id:1
  "BoxWrapper.subtree": 
  {
    id:2
    "Box.subtree": ImABox
  }
}
Tree #1 
{
  id:1
  "BoxWrapper.subtree": 
  {
    id:3
    "Box.subtree": ImABox
  },
  {
    id:4
    "Box.subtree": ImABox
  }
}

******* Test 2 *******

Initial Tree
-------------------
Creating instance #1 of ChangeCounter with 1 subelements
Creating instance #2 of Box with 1 subelements
Tree #0 
{
  id:1
  "ChangeCounter.subtree": 
  {
    id:2
    "Box.subtree": [10, "defaultText"]
  }
}

Updating Tree With Same Label (ChangeCounter)
-------------------
Updating ChangeCounter
Updating Box
instance #2 updated to instance #2 changed: subtree
instance #1 updated to instance #1 changed: subtree
Tree #0 
{
  id:1
  "ChangeCounter.subtree": 
  {
    id:2
    "Box.subtree": [10, "defaultText"]
  }
}

Updating Tree With New Label (ChangeCounter)
-------------------
Updating ChangeCounter
Calling reduce on ChangeCounter
Calling reduce on ChangeCounter
Updating Box
instance #2 updated to instance #2 changed: subtree
instance #1 updated to instance #1 changed: state subtree
Tree #0 
{
  id:1
  "ChangeCounter.subtree": 
  {
    id:2
    "Box.subtree": [11, "updatedText"]
  }
}

Flushing (ChangeCounter)
-------------------
Updating ChangeCounter
Updating Box
instance #2 updated to instance #2 changed: subtree
instance #1 updated to instance #1 changed: state subtree
Tree #0 
{
  id:1
  "ChangeCounter.subtree": 
  {
    id:2
    "Box.subtree": [2011, "updatedText"]
  }
}

Flushing #2 (ChangeCounter)
-------------------
Bailing Out Early Due To Memoization on ChangeCounter
Tree #0 
{
  id:1
  "ChangeCounter.subtree": 
  {
    id:2
    "Box.subtree": [2011, "updatedText"]
  }
}

Flushing #3 (ChangeCounter)
-------------------
Bailing Out Early Due To Memoization on ChangeCounter
Tree #0 
{
  id:1
  "ChangeCounter.subtree": 
  {
    id:2
    "Box.subtree": [2011, "updatedText"]
  }
}

Updating Tree With New Root Type (ButtonWrapperWrapper)
-------------------
Switching Component Types from: ChangeCounter to ButtonWrapperWrapper
Creating instance #4 of ButtonWrapper with 3 subelements
Creating instance #5 of StatelessButton with 1 subelements
Creating instance #6 of Box with 1 subelements
Creating instance #7 of StatelessButton with 1 subelements
Creating instance #8 of Box with 1 subelements
instance #1 updated to instance #3 changed: component state subtree
Tree #0 
{
  id:3
  "ButtonWrapperWrapper.subtree": buttonWrapperWrapperState,wrappedText:updatedText,
  {
    id:4
    "ButtonWrapper.subtree": 0,
    {
      id:5
      "StatelessButton.subtree": 
      {
        id:6
        "Box.subtree": ImABox
      }
    },
    {
      id:7
      "StatelessButton.subtree": 
      {
        id:8
        "Box.subtree": ImABox
      }
    }
  }
}

Updating Tree With Same Root Type as Previous (ButtonWrapperWrapper)
-------------------
Updating ButtonWrapperWrapper
Bailing Out Early Due To Memoization on ButtonWrapper
instance #3 updated to instance #3 changed: subtree
Tree #0 
{
  id:3
  "ButtonWrapperWrapper.subtree": buttonWrapperWrapperState,wrappedText:updatedTextmodified,
  {
    id:4
    "ButtonWrapper.subtree": 0,
    {
      id:5
      "StatelessButton.subtree": 
      {
        id:6
        "Box.subtree": ImABox
      }
    },
    {
      id:7
      "StatelessButton.subtree": 
      {
        id:8
        "Box.subtree": ImABox
      }
    }
  }
}

Trees rendered
-------------------
Tree #0 
{
  id:1
  "ChangeCounter.subtree": 
  {
    id:2
    "Box.subtree": [10, "defaultText"]
  }
}
Tree #1 
{
  id:1
  "ChangeCounter.subtree": 
  {
    id:2
    "Box.subtree": [10, "defaultText"]
  }
}
Tree #2 
{
  id:1
  "ChangeCounter.subtree": 
  {
    id:2
    "Box.subtree": [11, "updatedText"]
  }
}
Tree #3 
{
  id:1
  "ChangeCounter.subtree": 
  {
    id:2
    "Box.subtree": [2011, "updatedText"]
  }
}
Tree #4 
{
  id:3
  "ButtonWrapperWrapper.subtree": buttonWrapperWrapperState,wrappedText:updatedText,
  {
    id:4
    "ButtonWrapper.subtree": 0,
    {
      id:5
      "StatelessButton.subtree": 
      {
        id:6
        "Box.subtree": ImABox
      }
    },
    {
      id:7
      "StatelessButton.subtree": 
      {
        id:8
        "Box.subtree": ImABox
      }
    }
  }
}
Tree #5 
{
  id:3
  "ButtonWrapperWrapper.subtree": buttonWrapperWrapperState,wrappedText:updatedTextmodified,
  {
    id:4
    "ButtonWrapper.subtree": 0,
    {
      id:5
      "StatelessButton.subtree": 
      {
        id:6
        "Box.subtree": ImABox
      }
    },
    {
      id:7
      "StatelessButton.subtree": 
      {
        id:8
        "Box.subtree": ImABox
      }
    }
  }
}

******* Test Lists With Dynamic Keys *******

Initial BoxList
-------------------
Creating instance #1 of BoxList with 0 subelements
Tree #0 
{
  id:1
  "BoxList.subtree": 
}
Calling act on BoxList

Add Hello then Flush
-------------------
Updating BoxList
Creating instance #2 of BoxWithDynamicKeys with 1 subelements
instance #1 updated to instance #1 changed: state subtree
Tree #0 
{
  id:1
  "BoxList.subtree": 
  {
    id:2
    "BoxWithDynamicKeys.subtree": Hello
  }
}
Calling act on BoxList

Add World then Flush
-------------------
Updating BoxList
Creating instance #3 of BoxWithDynamicKeys with 1 subelements
Bailing Out Early Due To Memoization on BoxWithDynamicKeys
instance #1 updated to instance #1 changed: state subtree
Tree #0 
{
  id:1
  "BoxList.subtree": 
  {
    id:3
    "BoxWithDynamicKeys.subtree": World
  },
  {
    id:2
    "BoxWithDynamicKeys.subtree": Hello
  }
}
Calling act on BoxList

Reverse then Flush
-------------------
Updating BoxList
Bailing Out Early Due To Memoization on BoxWithDynamicKeys
Bailing Out Early Due To Memoization on BoxWithDynamicKeys
instance #1 updated to instance #1 changed: state subtree
Tree #0 
{
  id:1
  "BoxList.subtree": 
  {
    id:2
    "BoxWithDynamicKeys.subtree": Hello
  },
  {
    id:3
    "BoxWithDynamicKeys.subtree": World
  }
}

Trees rendered
-------------------
Tree #0 
{
  id:1
  "BoxList.subtree": 
}
Tree #1 
{
  id:1
  "BoxList.subtree": 
  {
    id:2
    "BoxWithDynamicKeys.subtree": Hello
  }
}
Tree #2 
{
  id:1
  "BoxList.subtree": 
  {
    id:3
    "BoxWithDynamicKeys.subtree": World
  },
  {
    id:2
    "BoxWithDynamicKeys.subtree": Hello
  }
}
Tree #3 
{
  id:1
  "BoxList.subtree": 
  {
    id:2
    "BoxWithDynamicKeys.subtree": Hello
  },
  {
    id:3
    "BoxWithDynamicKeys.subtree": World
  }
}

******* Test Lists Without Dynamic Keys *******

Initial BoxList
-------------------
Creating instance #1 of BoxList with 0 subelements
Tree #0 
{
  id:1
  "BoxList.subtree": 
}
Calling act on BoxList

Add Hello then Flush
-------------------
Updating BoxList
Creating instance #2 of Box with 1 subelements
instance #1 updated to instance #1 changed: state subtree
Tree #0 
{
  id:1
  "BoxList.subtree": 
  {
    id:2
    "Box.subtree": Hello
  }
}
Calling act on BoxList

Add World then Flush
-------------------
Updating BoxList
Creating instance #3 of Box with 1 subelements
Creating instance #4 of Box with 1 subelements
instance #1 updated to instance #1 changed: state subtree
Tree #0 
{
  id:1
  "BoxList.subtree": 
  {
    id:3
    "Box.subtree": World
  },
  {
    id:4
    "Box.subtree": Hello
  }
}
Calling act on BoxList

Reverse then Flush
-------------------
Updating BoxList
Updating Box
instance #4 updated to instance #4 changed: subtree
Updating Box
instance #3 updated to instance #3 changed: subtree
instance #1 updated to instance #1 changed: state subtree
Tree #0 
{
  id:1
  "BoxList.subtree": 
  {
    id:3
    "Box.subtree": Hello
  },
  {
    id:4
    "Box.subtree": World
  }
}

Trees rendered
-------------------
Tree #0 
{
  id:1
  "BoxList.subtree": 
}
Tree #1 
{
  id:1
  "BoxList.subtree": 
  {
    id:2
    "Box.subtree": Hello
  }
}
Tree #2 
{
  id:1
  "BoxList.subtree": 
  {
    id:3
    "Box.subtree": World
  },
  {
    id:4
    "Box.subtree": Hello
  }
}
Tree #3 
{
  id:1
  "BoxList.subtree": 
  {
    id:3
    "Box.subtree": Hello
  },
  {
    id:4
    "Box.subtree": World
  }
}

******* Test Deep Move Box With Dynamic Keys *******

Initial Box
-------------------
Creating instance #1 of BoxWithDynamicKeys with 1 subelements
Tree #0 
{
  id:1
  "BoxWithDynamicKeys.subtree": box to move
}

Add 2 Levels of div
-------------------
Bailing Out Early Due To Memoization on BoxWithDynamicKeys
Tree #0 first level before
Tree #1 second level before
Tree #2 
{
  id:1
  "BoxWithDynamicKeys.subtree": box to move
}
Tree #3 second level after
Tree #4 first level after

Trees rendered
-------------------
Tree #0 
{
  id:1
  "BoxWithDynamicKeys.subtree": box to move
}
Tree #1 first level before
Tree #2 second level before
Tree #3 
{
  id:1
  "BoxWithDynamicKeys.subtree": box to move
}
Tree #4 second level after
Tree #5 first level after

******* Test With Static Keys *******

Initial Boxes
-------------------
Creating instance #1 of Box with 1 subelements
Creating instance #2 of Box with 1 subelements
Tree #0 
{
  id:1
  "Box.subtree": Box1unchanged
}
Tree #1 
{
  id:2
  "Box.subtree": Box2unchanged
}

Swap Boxes
-------------------
Updating Box
instance #1 updated to instance #1 changed: subtree
Updating Box
instance #2 updated to instance #2 changed: subtree
Tree #0 
{
  id:2
  "Box.subtree": Box2changed
}
Tree #1 
{
  id:1
  "Box.subtree": Box1changed
}

Trees rendered
-------------------
Tree #0 
{
  id:1
  "Box.subtree": Box1unchanged
}
Tree #1 
{
  id:2
  "Box.subtree": Box2unchanged
}
Tree #2 
{
  id:2
  "Box.subtree": Box2changed
}
Tree #3 
{
  id:1
  "Box.subtree": Box1changed
}

******* Test Update on Alternate Clicks *******

Initial
-------------------
Creating instance #1 of UpdateAlternateClicks with 1 subelements
Tree #0 
{
  "UpdateAlternateClicks.state": 0,
  id:1
  "UpdateAlternateClicks.subtree": Rendered state is 0
}
Calling act on UpdateAlternateClicks

First click then flush
-------------------
Updating UpdateAlternateClicks
instance #1 updated to instance #1 changed: state
Tree #0 
{
  "UpdateAlternateClicks.state": 1,
  id:1
  "UpdateAlternateClicks.subtree": Rendered state is 0
}
Calling act on UpdateAlternateClicks

Second click then flush
-------------------
Updating UpdateAlternateClicks
instance #1 updated to instance #1 changed: state subtree
Tree #0 
{
  "UpdateAlternateClicks.state": 2,
  id:1
  "UpdateAlternateClicks.subtree": Rendered state is 2
}
Calling act on UpdateAlternateClicks

Third click then flush
-------------------
Updating UpdateAlternateClicks
instance #1 updated to instance #1 changed: state
Tree #0 
{
  "UpdateAlternateClicks.state": 3,
  id:1
  "UpdateAlternateClicks.subtree": Rendered state is 2
}
Calling act on UpdateAlternateClicks

Fourth click then flush
-------------------
Updating UpdateAlternateClicks
instance #1 updated to instance #1 changed: state subtree
Tree #0 
{
  "UpdateAlternateClicks.state": 4,
  id:1
  "UpdateAlternateClicks.subtree": Rendered state is 4
}

Trees rendered
-------------------
Tree #0 
{
  "UpdateAlternateClicks.state": 0,
  id:1
  "UpdateAlternateClicks.subtree": Rendered state is 0
}
Tree #1 
{
  "UpdateAlternateClicks.state": 1,
  id:1
  "UpdateAlternateClicks.subtree": Rendered state is 0
}
Tree #2 
{
  "UpdateAlternateClicks.state": 2,
  id:1
  "UpdateAlternateClicks.subtree": Rendered state is 2
}
Tree #3 
{
  "UpdateAlternateClicks.state": 3,
  id:1
  "UpdateAlternateClicks.subtree": Rendered state is 2
}
Tree #4 
{
  "UpdateAlternateClicks.state": 4,
  id:1
  "UpdateAlternateClicks.subtree": Rendered state is 4
}